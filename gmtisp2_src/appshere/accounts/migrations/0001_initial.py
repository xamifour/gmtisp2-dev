# Generated by Django 5.1.4 on 2024-12-21 16:58

import django.contrib.auth.models
import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Organization',
            fields=[
                ('created', models.DateTimeField(auto_now_add=True, db_index=True, verbose_name='created')),
                ('modified', models.DateTimeField(auto_now=True, verbose_name='modified')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=67, unique=True, verbose_name='name')),
                ('slug', models.CharField(max_length=67, unique=True, verbose_name='slug')),
                ('description', models.TextField(blank=True, verbose_name='description')),
                ('email', models.EmailField(blank=True, max_length=254, unique=True, verbose_name='email')),
                ('address', models.CharField(blank=True, max_length=512, null=True, verbose_name='address')),
                ('phone', models.CharField(blank=True, max_length=10, null=True, unique=True, verbose_name='phone number')),
                ('url', models.URLField(blank=True, null=True, verbose_name='URL')),
                ('logo', models.ImageField(blank=True, help_text='Logo URL', max_length=67, null=True, upload_to='', verbose_name='logo')),
                ('theme', models.CharField(blank=True, help_text='Primary theme color in hex format (e.g. #ffffff)', max_length=7, null=True, verbose_name='theme')),
                ('session_quota', models.PositiveIntegerField(default=0, verbose_name='session quota')),
                ('notes', models.TextField(blank=True, help_text='Notes', null=True, verbose_name='notes')),
            ],
            options={
                'ordering': ['-created'],
            },
        ),
        migrations.CreateModel(
            name='Nas',
            fields=[
                ('created', models.DateTimeField(auto_now_add=True, db_index=True, verbose_name='created')),
                ('modified', models.DateTimeField(auto_now=True, verbose_name='modified')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(db_column='nasname', db_index=True, help_text='NAS Name (or IP address)', max_length=67, verbose_name='name')),
                ('short_name', models.CharField(db_column='shortname', max_length=67, verbose_name='short name')),
                ('type', models.CharField(max_length=67, verbose_name='type')),
                ('ports', models.PositiveIntegerField(blank=True, null=True, verbose_name='ports')),
                ('secret', models.CharField(help_text='Shared Secret', max_length=67, verbose_name='secret')),
                ('server', models.CharField(blank=True, max_length=67, null=True, verbose_name='server')),
                ('community', models.CharField(blank=True, max_length=67, null=True, verbose_name='community')),
                ('description', models.CharField(blank=True, max_length=67, null=True, verbose_name='description')),
                ('gps_location', models.CharField(blank=True, max_length=67, null=True, verbose_name='GPS Location')),
                ('notes', models.TextField(blank=True, help_text='Notes', null=True, verbose_name='notes')),
                ('organization', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='nas_org', to='accounts.organization')),
            ],
            options={
                'verbose_name': 'NAS',
                'verbose_name_plural': 'NAS',
                'db_table': 'nas',
                'ordering': ['-created'],
            },
        ),
        migrations.CreateModel(
            name='Dashboard',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('description', models.TextField(blank=True, verbose_name='description')),
                ('organization', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='dash_org', to='accounts.organization')),
            ],
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('created', models.DateTimeField(auto_now_add=True, db_index=True, verbose_name='created')),
                ('modified', models.DateTimeField(auto_now=True, verbose_name='modified')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('mikrotik_id', models.CharField(blank=True, max_length=67, null=True, unique=True)),
                ('name', models.CharField(blank=True, max_length=67, null=True, unique=True, verbose_name='name')),
                ('group', models.CharField(default='default', max_length=67, verbose_name='group')),
                ('disabled', models.BooleanField(default=False, verbose_name='disabled')),
                ('otp_secret', models.CharField(blank=True, max_length=256, null=True, verbose_name='otp-secret')),
                ('shared_users', models.CharField(default='1', max_length=10, verbose_name='shared-users')),
                ('attributes', models.CharField(blank=True, max_length=67, null=True, verbose_name='attributes')),
                ('plain_password', models.CharField(blank=True, max_length=256, null=True, verbose_name='plain password')),
                ('country', models.CharField(blank=True, max_length=67, null=True, verbose_name='country')),
                ('city', models.CharField(blank=True, max_length=67, null=True, verbose_name='city')),
                ('postal_code', models.CharField(blank=True, help_text='+233', max_length=67, null=True, verbose_name='postal_code')),
                ('phone', models.CharField(blank=True, help_text='0201234567', max_length=10, null=True, verbose_name='phone')),
                ('address', models.CharField(blank=True, max_length=512, null=True, verbose_name='address')),
                ('notes', models.CharField(blank=True, max_length=1024, null=True, verbose_name='notes')),
                ('theme', models.CharField(blank=True, help_text='User theme/color in hex format (e.g. #ffffff)', max_length=7, null=True, verbose_name='theme')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
                ('organization', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='user_org', to='accounts.organization')),
            ],
            options={
                'ordering': ['-created'],
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='UserUsage',
            fields=[
                ('created', models.DateTimeField(auto_now_add=True, db_index=True, verbose_name='created')),
                ('modified', models.DateTimeField(auto_now=True, verbose_name='modified')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('mikrotik_id', models.CharField(blank=True, max_length=67, null=True, unique=True)),
                ('active_sessions', models.CharField(default='0', max_length=10)),
                ('active_sub_sessions', models.CharField(default='0', max_length=10)),
                ('total_download', models.CharField(default='0', max_length=67)),
                ('total_upload', models.CharField(default='0', max_length=67)),
                ('total_uptime', models.CharField(blank=True, max_length=67, null=True)),
                ('attributes_details', models.CharField(blank=True, max_length=256, null=True)),
                ('organization', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='userusage_org', to='accounts.organization')),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-created'],
            },
        ),
    ]
